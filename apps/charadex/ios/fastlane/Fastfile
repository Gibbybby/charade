ENV["APP_STORE_CONNECT_API_KEY_PATH"] = "./fastlane/AuthKey_Fastlane_9U36FG7Z7G.json"

default_platform(:ios)

platform :ios do

  ##################################
  #     Configuration Setup        #
  ##################################

  # Fetch app_identifier and team_id from Appfile
  app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
  team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)

  # Global project settings
  workspace_name = "Runner.xcworkspace"  # Xcode workspace
  scheme_name = "Runner"                 # Build scheme
  xcodeproj_name = "Runner.xcodeproj"    # Xcode project

  # Provisioning profiles for code signing
  provisioning_profiles = {
    development: { "#{app_identifier}" => "match Development #{app_identifier}" },
    adhoc: { "#{app_identifier}" => "match AdHoc #{app_identifier}" },
    appstore: { "#{app_identifier}" => "match AppStore #{app_identifier}" }
  }

  ##################################
  #     App Creation Lane          #
  ##################################

  # Creates a new app on App Store Connect using the `app_identifier` from the Appfile.
  # Specify `app_name` and optional `language` (defaults to 'en-US').

  # Usage:
  # fastlane ios create_app_on_appstore app_name:"Vucak Smart Office" language:"de-DE"

  desc "Create a new app on the App Store Connect"
  lane :create_app_on_appstore do |options|
    app_name = options[:app_name]
    language = options[:language] || 'en-US'

    # Check for required parameter
    UI.user_error!("Missing required parameter: app_name. The app_identifier is read from the Appfile.") if app_name.nil?

    # Create the app on App Store Connect
    produce(
        app_name: app_name,
        language: language
    )
  end


  ##################################
  #  Certificate Management Lanes  #
  ##################################

  # These lanes handle certificate synchronization and management for development, ad hoc, and App Store builds.
  # Certificates should only be created locally when needed (e.g., setting up a new app or when certificates expire).
  # On CI machines, the certificates are synchronized in read-only mode to avoid regenerating or modifying existing profiles.

  desc "Synchronize certificates for a specific type (development, adhoc, or appstore)"
  private_lane :sync_certificates_of_type do |options|
    # Synchronizes code signing for the specified type.
    # - type: 'development', 'adhoc', or 'appstore'
    # - readonly: True on CI or local environments to avoid regenerating certificates
    # - force_for_new_devices: Forces synchronization for newly added devices (default: true)
    sync_code_signing(
      type: options[:type],
      readonly: options[:readonly],
      force_for_new_devices: options[:force_for_new_devices] || true
    )
  end

  desc "Synchronize all certificates (development, adhoc, and appstore)"
  lane :sync_certificates do
    # Synchronizes certificates in read-only mode, suitable for CI environments or local development
    sync_certificates_of_type(type: "development", readonly: true)
    sync_certificates_of_type(type: "adhoc", readonly: true)
    sync_certificates_of_type(type: "appstore", readonly: true)
  end

  desc "Generate new certificates and provisioning profiles"
  lane :generate_certificates_and_profiles do
    # Creates new certificates and profiles for development, ad hoc, and App Store distributions.
    # This should be run on a local machine and not on CI, as it modifies code signing resources.
    sync_certificates_of_type(type: "development", readonly: false)
    sync_certificates_of_type(type: "adhoc", readonly: false)
    sync_certificates_of_type(type: "appstore", readonly: false)

    UI.message("New certificates and provisioning profiles have been generated for development, ad hoc, and App Store.")
  end

  ##################################
  #      Build Lanes   #
  ##################################

  # These lanes handle the app build process for different environments (Development, Ad Hoc, App Store).
  # Each environment builds with specific provisioning profiles and export methods.
  # Certificate synchronization is performed in read-only mode to ensure that the appropriate profiles are available.
  # Additional steps ensure that the appropriate team settings and signing configurations are applied.

  desc "Build the app for a specified environment"
  private_lane :build_app_for_environment do |options|
    # Update the project team and code signing settings to ensure the correct team is used.
    # This is necessary if multiple teams are involved in the certificate management.
    update_project_team
    update_code_signing_settings(use_automatic_signing: false)

    # Synchronize certificates for the given type in read-only mode.
    # - type: Specifies the environment ('development', 'adhoc', 'appstore')
    # - export_method: The export method used for the build ('development', 'ad-hoc', 'app-store')
    sync_certificates_of_type(type: options[:type], readonly: true)

    # Match handles export profiles, not the build configuration itself.
    # Dynamically construct environment variable names for provisioning profiles and certificates.
    profile_env_var = "sigh_#{app_identifier}_#{options[:type]}_profile-path"
    certificate_env_var = "sigh_#{app_identifier}_#{options[:type]}_certificate-name"

    # Update the project provisioning to use the appropriate profile from the environment variables.
    update_project_provisioning(profile: ENV[profile_env_var])

    # Build the app using the specified workspace, scheme, and export method.
    # The export options include the correct provisioning profile and code signing identity.
    build_app(
      workspace: workspace_name,
      scheme: scheme_name,
      export_method: options[:export_method],
      codesigning_identity: ENV[certificate_env_var],
      export_team_id: team_id,
      export_options: {
        provisioningProfiles: provisioning_profiles[options[:type].to_sym]
      }
    )
  end

  desc "Build the app for the Development environment"
  lane :build_development do
    # Builds the app using the 'development' configuration.
    build_app_for_environment(type: "development", export_method: "development")
  end

  desc "Build the app for the Ad Hoc distribution"
  lane :build_ad_hoc do
    # Builds the app using the 'ad-hoc' configuration for testing and distribution outside the App Store.
    build_app_for_environment(type: "adhoc", export_method: "ad-hoc")
  end

  desc "Build the app for the App Store (Production)"
  lane :build_app_store do
    # Builds the app using the 'appstore' configuration for submission to the App Store.
    build_app_for_environment(type: "appstore", export_method: "app-store")
  end

  ##################################
  #      Deployment Lanes          #
  ##################################

  # These lanes handle the process of building, versioning, and deploying the app.
  # The deployment can include incrementing the build number, building for App Store submission,
  # uploading to TestFlight and saving the build number for CI.

  desc "Increment the build number, build the app for App Store, and upload to TestFlight"
  lane :build_and_upload_testflight do |options|
    # Use GitLab pipeline ID for build number, or increment latest TestFlight version
    new_build_number = ENV['CI_PIPELINE_IID'] || latest_testflight_build_number + 1

    # Increment the build number in the Xcode project
    increment_build_number(
      build_number: new_build_number,
      xcodeproj: xcodeproj_name
    )

    # Build the app for App Store distribution
    build_app_store

    # Upload the build to TestFlight with the specified changelog
    upload_to_testflight(
      changelog: options[:changelog] || "No changelog provided",
      build_number: new_build_number.to_s
      # Uncomment to skip waiting for build processing if needed
      # skip_waiting_for_build_processing: true
    )
  end

  desc "Upload latest TestFlight build to production, ready for App Store Connect without submitting for review"
  lane :upload_testflight_to_production do |options|
    # Use GitLab pipeline ID or get latest TestFlight build number
    build_number = ENV['CI_PIPELINE_IID'] || latest_testflight_build_number.to_s
    version_number = flutter_version()["version_name"]

    UI.message("🚀 Deployment Info | Build: ##{build_number} | Version: #{version_number} | Environment: #{ENV['CI'] ? 'CI' : 'Local'}")

    upload_to_app_store(
      reject_if_possible: true, # Rejects the previously submitted build if it's in a state where it's possible
      skip_binary_upload: true, # Build is already uploaded via TestFlight
      submit_for_review: true,
      automatic_release: false,
      skip_screenshots: true,
      precheck_include_in_app_purchases: false, # Skip in-app purchase check
      force: true, # Skip HTML report verification
      app_version: version_number,
      build_number: build_number, 
      copyright: "#{Time.now.year} Vucak IT Solutions"
    )
  end

  ##################################
  #       Metadata Management      #
  ##################################

  # Available Variables:
  #   submit_for_review: Boolean
  #     Set to true to submit changes for App Store review
  #     Default: false
  #
  #   privacy_data_option: String
  #     Specifies how to handle privacy data
  #     Values: 'no_data_collected', 'questionnaire', 'existing'
  #     Default: 'no_data_collected'
  #
  #   existing_json_path: String
  #     Path to custom privacy details JSON file
  #     Required when privacy_data_option = 'existing'
  #     Example: './fastlane/custom_privacy.json'
  #
  # Required Directory Structure:
  #   fastlane/
  #     ├── app_privacy_details_no_data_collected.json
  #     ├── app_privacy_details_results.json
  #     ├── ratings_config.json
  #     └── screenshots/
  #         ├── en-US/
  #         └── [other locales]/

  desc "Update only App Store metadata (descriptions, keywords, ratings, privacy) without screenshots or binaries"
  lane :update_metadata do |options|
    # Example: fastlane update_metadata submit_for_review:true privacy_data_option:'questionnaire'
    submit_for_review = options[:submit_for_review] || false

    upload_privacy_details(
      options[:privacy_data_option] || 'no_data_collected', 
      options[:existing_json_path]
    )
    upload_to_app_store(
      app_store_config(
        submit_for_review: submit_for_review, 
        update_metadata: true
      )
    )
    UI.success("✨ App Store metadata successfully updated")
  end

  desc "Update only App Store screenshots without modifying metadata or submitting new binary"
  lane :update_screenshots do |options|
    # Example: fastlane update_screenshots submit_for_review:true
    submit_for_review = options[:submit_for_review] || false

    upload_to_app_store(
      app_store_config(
        submit_for_review: submit_for_review, 
        update_screenshots: true
      )
    )
    UI.success("📸 Screenshots successfully uploaded to App Store")
  end

  desc "Update both metadata and screenshots on App Store in a single deployment"
  lane :update_app_store do |options|
    # Example: fastlane update_app_store submit_for_review:true privacy_data_option:'existing' existing_json_path:'./fastlane/privacy.json'
    submit_for_review = options[:submit_for_review] || false

    upload_privacy_details(
      options[:privacy_data_option] || 'no_data_collected', 
      options[:existing_json_path]
    )
    upload_to_app_store(
      app_store_config(
        submit_for_review: submit_for_review,
        update_metadata: true,
        update_screenshots: true
      )
    )
    UI.success("🚀 App Store metadata and screenshots successfully updated")
  end

  # Shared App Store upload configuration
  def app_store_config(submit_for_review: false, update_metadata: false, update_screenshots: false)
    # Input Variables:
    #   submit_for_review: Boolean - Submit for App Store review
    #   update_metadata: Boolean - Update app metadata
    #   update_screenshots: Boolean - Update app screenshots
    #
    # Returns: Hash - App Store upload configuration
    {
      submit_for_review: submit_for_review,
      app_rating_config_path: './fastlane/ratings_config.json',
      overwrite_screenshots: update_screenshots,
      skip_metadata: !update_metadata,
      skip_screenshots: !update_screenshots,
      skip_app_version_update: true,
      skip_binary_upload: true,
      precheck_include_in_app_purchases: false, # Precheck cannot verify In-app purchases with API Key
      force: true # Skip HTML content verification
    }
  end

  # Handle privacy details upload
  def upload_privacy_details(privacy_data_option, existing_json_path)
    # Input Variables:
    #   privacy_data_option: String - Privacy data handling method
    #   existing_json_path: String - Path to custom privacy JSON
    #
    # Supported privacy_data_option values:
    #   'no_data_collected' - Use pre-configured no-data JSON
    #   'questionnaire' - Generate JSON via interactive prompts
    #   'existing' - Use custom JSON file
    privacy_details_path = prepare_privacy_details_path(
      privacy_data_option: privacy_data_option,
      existing_json_path: existing_json_path
    )

    upload_app_privacy_details_to_app_store(
      json_path: "./fastlane/#{privacy_details_path}"
    )
    UI.message("📋 Privacy details uploaded using '#{privacy_data_option}' configuration")
  end

  # Private lane to prepare the path for the privacy details JSON based on the specified option
  private_lane :prepare_privacy_details_path do |options|
    privacy_data_option = options[:privacy_data_option]
    existing_json_path = options[:existing_json_path]

    case privacy_data_option
    when 'no_data_collected'
      # Use the pre-existing file for no data collected, located in the fastlane folder
      "app_privacy_details_no_data_collected.json"
    when 'questionnaire'
      # Fill out a questionnaire and save the results to the fastlane folder
      questionnaire_path = "app_privacy_details_results.json"
      upload_app_privacy_details_to_app_store(
        skip_upload: true,
        output_json_path: "./fastlane/#{questionnaire_path}"
      )
      questionnaire_path
    when 'existing'
      # Use an existing JSON file if specified; it should be located in the fastlane folder
      if existing_json_path.nil? || !File.exist?(existing_json_path)
        UI.user_error!("❌ Existing JSON path must be specified and valid when using 'existing' option")
      end
      existing_json_path
    else
      UI.user_error!("❌ Invalid privacy_data_option. Choose 'no_data_collected', 'questionnaire', or 'existing'")
    end
  end

end
